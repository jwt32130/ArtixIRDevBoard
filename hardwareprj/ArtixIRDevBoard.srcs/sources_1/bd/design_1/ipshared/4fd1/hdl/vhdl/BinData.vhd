-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BinData is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    Bin_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bin_V_EN_A : OUT STD_LOGIC;
    Bin_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Bin_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Bin_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Bin_V_Clk_A : OUT STD_LOGIC;
    Bin_V_Rst_A : OUT STD_LOGIC;
    CorrectedFrameDataIn_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    CorrectedFrameDataIn_TVALID : IN STD_LOGIC;
    CorrectedFrameDataIn_TREADY : OUT STD_LOGIC;
    CorrectedFrameDataIn_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    CorrectedFrameDataIn_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    CorrectedFrameDataIn_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    CorrectedFrameDataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    CorrectedFrameDataIn_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    CorrectedFrameDataIn_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    CorrectedFrameDataOut_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    CorrectedFrameDataOut_TVALID : OUT STD_LOGIC;
    CorrectedFrameDataOut_TREADY : IN STD_LOGIC;
    CorrectedFrameDataOut_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    CorrectedFrameDataOut_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    CorrectedFrameDataOut_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    CorrectedFrameDataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    CorrectedFrameDataOut_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    CorrectedFrameDataOut_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of BinData is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "BinData,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a25t-csg325-2,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.422000,HLS_SYN_LAT=153602,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=302,HLS_SYN_LUT=616,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_186A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000011000011010100000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv17_12C00 : STD_LOGIC_VECTOR (16 downto 0) := "10010110000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_7FF : STD_LOGIC_VECTOR (15 downto 0) := "0000011111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal maxBin_V : STD_LOGIC_VECTOR (31 downto 0);
    signal maxBin_V_ap_vld : STD_LOGIC;
    signal minBin_V : STD_LOGIC_VECTOR (31 downto 0);
    signal minBin_V_ap_vld : STD_LOGIC;
    signal location_V : STD_LOGIC_VECTOR (31 downto 0);
    signal CorrectedFrameDataIn_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln28_reg_456 : STD_LOGIC_VECTOR (0 downto 0);
    signal CorrectedFrameDataOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_0_reg_206 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln27_fu_229_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln27_reg_451 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln28_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_249_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_reg_460 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_data_V_1_fu_308_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_fu_317_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln34_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln34_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bin_V_addr_reg_514 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln895_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_1_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_210_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln38_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal maxBin_V_load_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal minBin_V_load_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal Bin_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1503_fu_217_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal addRam_fu_221_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_292_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln34_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_325_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln35_fu_335_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal RamLocation_fu_339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_368_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln38_fu_364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_fu_378_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln887_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newPixValue_V_1_fu_391_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln46_fu_397_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newBinValue_V_1_fu_413_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newBinValue_V_fu_405_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_CorrectedFrameDataOut_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_data_V_U_apdone_blk : STD_LOGIC;
    signal CorrectedFrameDataIn_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal CorrectedFrameDataIn_TVALID_int : STD_LOGIC;
    signal CorrectedFrameDataIn_TREADY_int : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal CorrectedFrameDataIn_TKEEP_int : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_CorrectedFrameDataIn_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal CorrectedFrameDataIn_TSTRB_int : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_CorrectedFrameDataIn_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_user_V_U_apdone_blk : STD_LOGIC;
    signal CorrectedFrameDataIn_TUSER_int : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_CorrectedFrameDataIn_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_last_V_U_apdone_blk : STD_LOGIC;
    signal CorrectedFrameDataIn_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_CorrectedFrameDataIn_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_id_V_U_apdone_blk : STD_LOGIC;
    signal CorrectedFrameDataIn_TID_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_CorrectedFrameDataIn_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal CorrectedFrameDataIn_TDEST_int : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_CorrectedFrameDataIn_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataIn_V_dest_V_U_ack_in : STD_LOGIC;
    signal CorrectedFrameDataOut_TVALID_int : STD_LOGIC;
    signal CorrectedFrameDataOut_TREADY_int : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_CorrectedFrameDataOut_V_dest_V_U_vld_out : STD_LOGIC;

    component BinData_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        maxBin_V : IN STD_LOGIC_VECTOR (31 downto 0);
        maxBin_V_ap_vld : IN STD_LOGIC;
        minBin_V : IN STD_LOGIC_VECTOR (31 downto 0);
        minBin_V_ap_vld : IN STD_LOGIC;
        location_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    BinData_CRTL_BUS_s_axi_U : component BinData_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        maxBin_V => maxBin_V,
        maxBin_V_ap_vld => maxBin_V_ap_vld,
        minBin_V => minBin_V,
        minBin_V_ap_vld => minBin_V_ap_vld,
        location_V => location_V);

    regslice_both_CorrectedFrameDataIn_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TDATA,
        vld_in => CorrectedFrameDataIn_TVALID,
        ack_in => regslice_both_CorrectedFrameDataIn_V_data_V_U_ack_in,
        data_out => CorrectedFrameDataIn_TDATA_int,
        vld_out => CorrectedFrameDataIn_TVALID_int,
        ack_out => CorrectedFrameDataIn_TREADY_int,
        apdone_blk => regslice_both_CorrectedFrameDataIn_V_data_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataIn_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TKEEP,
        vld_in => CorrectedFrameDataIn_TVALID,
        ack_in => regslice_both_CorrectedFrameDataIn_V_keep_V_U_ack_in,
        data_out => CorrectedFrameDataIn_TKEEP_int,
        vld_out => regslice_both_CorrectedFrameDataIn_V_keep_V_U_vld_out,
        ack_out => CorrectedFrameDataIn_TREADY_int,
        apdone_blk => regslice_both_CorrectedFrameDataIn_V_keep_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataIn_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TSTRB,
        vld_in => CorrectedFrameDataIn_TVALID,
        ack_in => regslice_both_CorrectedFrameDataIn_V_strb_V_U_ack_in,
        data_out => CorrectedFrameDataIn_TSTRB_int,
        vld_out => regslice_both_CorrectedFrameDataIn_V_strb_V_U_vld_out,
        ack_out => CorrectedFrameDataIn_TREADY_int,
        apdone_blk => regslice_both_CorrectedFrameDataIn_V_strb_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataIn_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TUSER,
        vld_in => CorrectedFrameDataIn_TVALID,
        ack_in => regslice_both_CorrectedFrameDataIn_V_user_V_U_ack_in,
        data_out => CorrectedFrameDataIn_TUSER_int,
        vld_out => regslice_both_CorrectedFrameDataIn_V_user_V_U_vld_out,
        ack_out => CorrectedFrameDataIn_TREADY_int,
        apdone_blk => regslice_both_CorrectedFrameDataIn_V_user_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataIn_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TLAST,
        vld_in => CorrectedFrameDataIn_TVALID,
        ack_in => regslice_both_CorrectedFrameDataIn_V_last_V_U_ack_in,
        data_out => CorrectedFrameDataIn_TLAST_int,
        vld_out => regslice_both_CorrectedFrameDataIn_V_last_V_U_vld_out,
        ack_out => CorrectedFrameDataIn_TREADY_int,
        apdone_blk => regslice_both_CorrectedFrameDataIn_V_last_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataIn_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TID,
        vld_in => CorrectedFrameDataIn_TVALID,
        ack_in => regslice_both_CorrectedFrameDataIn_V_id_V_U_ack_in,
        data_out => CorrectedFrameDataIn_TID_int,
        vld_out => regslice_both_CorrectedFrameDataIn_V_id_V_U_vld_out,
        ack_out => CorrectedFrameDataIn_TREADY_int,
        apdone_blk => regslice_both_CorrectedFrameDataIn_V_id_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataIn_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TDEST,
        vld_in => CorrectedFrameDataIn_TVALID,
        ack_in => regslice_both_CorrectedFrameDataIn_V_dest_V_U_ack_in,
        data_out => CorrectedFrameDataIn_TDEST_int,
        vld_out => regslice_both_CorrectedFrameDataIn_V_dest_V_U_vld_out,
        ack_out => CorrectedFrameDataIn_TREADY_int,
        apdone_blk => regslice_both_CorrectedFrameDataIn_V_dest_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataOut_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_data_V_1_fu_308_p3,
        vld_in => CorrectedFrameDataOut_TVALID_int,
        ack_in => CorrectedFrameDataOut_TREADY_int,
        data_out => CorrectedFrameDataOut_TDATA,
        vld_out => regslice_both_CorrectedFrameDataOut_V_data_V_U_vld_out,
        ack_out => CorrectedFrameDataOut_TREADY,
        apdone_blk => regslice_both_CorrectedFrameDataOut_V_data_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataOut_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TKEEP_int,
        vld_in => CorrectedFrameDataOut_TVALID_int,
        ack_in => regslice_both_CorrectedFrameDataOut_V_keep_V_U_ack_in_dummy,
        data_out => CorrectedFrameDataOut_TKEEP,
        vld_out => regslice_both_CorrectedFrameDataOut_V_keep_V_U_vld_out,
        ack_out => CorrectedFrameDataOut_TREADY,
        apdone_blk => regslice_both_CorrectedFrameDataOut_V_keep_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataOut_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TSTRB_int,
        vld_in => CorrectedFrameDataOut_TVALID_int,
        ack_in => regslice_both_CorrectedFrameDataOut_V_strb_V_U_ack_in_dummy,
        data_out => CorrectedFrameDataOut_TSTRB,
        vld_out => regslice_both_CorrectedFrameDataOut_V_strb_V_U_vld_out,
        ack_out => CorrectedFrameDataOut_TREADY,
        apdone_blk => regslice_both_CorrectedFrameDataOut_V_strb_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataOut_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TUSER_int,
        vld_in => CorrectedFrameDataOut_TVALID_int,
        ack_in => regslice_both_CorrectedFrameDataOut_V_user_V_U_ack_in_dummy,
        data_out => CorrectedFrameDataOut_TUSER,
        vld_out => regslice_both_CorrectedFrameDataOut_V_user_V_U_vld_out,
        ack_out => CorrectedFrameDataOut_TREADY,
        apdone_blk => regslice_both_CorrectedFrameDataOut_V_user_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataOut_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TLAST_int,
        vld_in => CorrectedFrameDataOut_TVALID_int,
        ack_in => regslice_both_CorrectedFrameDataOut_V_last_V_U_ack_in_dummy,
        data_out => CorrectedFrameDataOut_TLAST,
        vld_out => regslice_both_CorrectedFrameDataOut_V_last_V_U_vld_out,
        ack_out => CorrectedFrameDataOut_TREADY,
        apdone_blk => regslice_both_CorrectedFrameDataOut_V_last_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataOut_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TID_int,
        vld_in => CorrectedFrameDataOut_TVALID_int,
        ack_in => regslice_both_CorrectedFrameDataOut_V_id_V_U_ack_in_dummy,
        data_out => CorrectedFrameDataOut_TID,
        vld_out => regslice_both_CorrectedFrameDataOut_V_id_V_U_vld_out,
        ack_out => CorrectedFrameDataOut_TREADY,
        apdone_blk => regslice_both_CorrectedFrameDataOut_V_id_V_U_apdone_blk);

    regslice_both_CorrectedFrameDataOut_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => CorrectedFrameDataIn_TDEST_int,
        vld_in => CorrectedFrameDataOut_TVALID_int,
        ack_in => regslice_both_CorrectedFrameDataOut_V_dest_V_U_ack_in_dummy,
        data_out => CorrectedFrameDataOut_TDEST,
        vld_out => regslice_both_CorrectedFrameDataOut_V_dest_V_U_vld_out,
        ack_out => CorrectedFrameDataOut_TREADY,
        apdone_blk => regslice_both_CorrectedFrameDataOut_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_206 <= i_reg_460;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_206 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    maxBin_V_load_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln895_reg_519 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                maxBin_V_load_fu_120 <= sext_ln34_reg_506;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                maxBin_V_load_fu_120 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minBin_V_load_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln887_1_reg_523 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                minBin_V_load_fu_124 <= sext_ln34_reg_506;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                minBin_V_load_fu_124 <= ap_const_lv32_186A0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                Bin_V_addr_reg_514 <= sext_ln38_fu_344_p1(11 - 1 downto 0);
                icmp_ln887_1_reg_523 <= icmp_ln887_1_fu_358_p2;
                icmp_ln895_reg_519 <= icmp_ln895_fu_349_p2;
                sext_ln34_reg_506 <= sext_ln34_fu_321_p1;
                shift_reg_500 <= shift_fu_317_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_460 <= i_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln28_reg_456 <= icmp_ln28_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    zext_ln27_reg_451(10) <= zext_ln27_fu_229_p1(10);
            end if;
        end if;
    end process;
    zext_ln27_reg_451(9 downto 0) <= "0000000000";
    zext_ln27_reg_451(15 downto 11) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln28_fu_243_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_CS_fsm_state5, regslice_both_CorrectedFrameDataOut_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln28_fu_243_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln28_fu_243_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                if (((regslice_both_CorrectedFrameDataOut_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    Bin_V_Addr_A <= std_logic_vector(shift_left(unsigned(Bin_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    Bin_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, Bin_V_addr_reg_514, sext_ln38_fu_344_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Bin_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Bin_V_addr_reg_514),32));
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Bin_V_Addr_A_orig <= sext_ln38_fu_344_p1(32 - 1 downto 0);
        else 
            Bin_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Bin_V_Clk_A <= ap_clk;
    Bin_V_Din_A <= 
        newBinValue_V_1_fu_413_p3 when (shift_reg_500(0) = '1') else 
        newBinValue_V_fu_405_p3;

    Bin_V_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            Bin_V_EN_A <= ap_const_logic_1;
        else 
            Bin_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    Bin_V_Rst_A_assign_proc : process(ap_rst_n)
    begin
                Bin_V_Rst_A <= not(ap_rst_n);
    end process;


    Bin_V_WEN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Bin_V_WEN_A <= ap_const_lv4_F;
        else 
            Bin_V_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;


    CorrectedFrameDataIn_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln28_reg_456, CorrectedFrameDataIn_TVALID_int)
    begin
        if (((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            CorrectedFrameDataIn_TDATA_blk_n <= CorrectedFrameDataIn_TVALID_int;
        else 
            CorrectedFrameDataIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    CorrectedFrameDataIn_TREADY_assign_proc : process(CorrectedFrameDataIn_TVALID, regslice_both_CorrectedFrameDataIn_V_data_V_U_ack_in)
    begin
        if (((regslice_both_CorrectedFrameDataIn_V_data_V_U_ack_in = ap_const_logic_1) and (ap_const_logic_1 = CorrectedFrameDataIn_TVALID))) then 
            CorrectedFrameDataIn_TREADY <= ap_const_logic_1;
        else 
            CorrectedFrameDataIn_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    CorrectedFrameDataIn_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln28_reg_456, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            CorrectedFrameDataIn_TREADY_int <= ap_const_logic_1;
        else 
            CorrectedFrameDataIn_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    CorrectedFrameDataOut_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln28_reg_456, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, CorrectedFrameDataOut_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            CorrectedFrameDataOut_TDATA_blk_n <= CorrectedFrameDataOut_TREADY_int;
        else 
            CorrectedFrameDataOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    CorrectedFrameDataOut_TVALID <= regslice_both_CorrectedFrameDataOut_V_data_V_U_vld_out;

    CorrectedFrameDataOut_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln28_reg_456, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            CorrectedFrameDataOut_TVALID_int <= ap_const_logic_1;
        else 
            CorrectedFrameDataOut_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    RamLocation_fu_339_p2 <= std_logic_vector(unsigned(zext_ln27_reg_451) + unsigned(sext_ln35_fu_335_p1));
    addRam_fu_221_p3 <= (trunc_ln1503_fu_217_p1 & ap_const_lv10_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln28_reg_456, CorrectedFrameDataIn_TVALID_int)
    begin
                ap_block_pp0_stage1_01001 <= ((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_const_logic_0 = CorrectedFrameDataIn_TVALID_int) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln28_reg_456, ap_block_state3_io, CorrectedFrameDataIn_TVALID_int)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_const_logic_0 = CorrectedFrameDataIn_TVALID_int))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln28_reg_456, ap_block_state3_io, CorrectedFrameDataIn_TVALID_int)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_const_logic_0 = CorrectedFrameDataIn_TVALID_int))));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(icmp_ln28_reg_456, CorrectedFrameDataOut_TREADY_int)
    begin
                ap_block_state3_io <= ((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_const_logic_0 = CorrectedFrameDataOut_TREADY_int));
    end process;


    ap_block_state3_pp0_stage1_iter0_assign_proc : process(icmp_ln28_reg_456, CorrectedFrameDataIn_TVALID_int)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_const_logic_0 = CorrectedFrameDataIn_TVALID_int));
    end process;


    ap_block_state4_io_assign_proc : process(icmp_ln28_reg_456, CorrectedFrameDataOut_TREADY_int)
    begin
                ap_block_state4_io <= ((icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_const_logic_0 = CorrectedFrameDataOut_TREADY_int));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln28_fu_243_p2)
    begin
        if ((icmp_ln28_fu_243_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, regslice_both_CorrectedFrameDataOut_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_CorrectedFrameDataOut_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_210_p4_assign_proc : process(icmp_ln28_reg_456, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_0_reg_206, i_reg_460)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln28_reg_456 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_210_p4 <= i_reg_460;
        else 
            ap_phi_mux_i_0_phi_fu_210_p4 <= i_0_reg_206;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_CorrectedFrameDataOut_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_CorrectedFrameDataOut_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_fu_249_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_210_p4) + unsigned(ap_const_lv17_1));
    icmp_ln28_fu_243_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_210_p4 = ap_const_lv17_12C00) else "0";
    icmp_ln34_fu_302_p2 <= "1" when (signed(tmp_1_fu_292_p4) > signed(ap_const_lv5_0)) else "0";
    icmp_ln887_1_fu_358_p2 <= "1" when (unsigned(sext_ln34_fu_321_p1) < unsigned(minBin_V_load_fu_124)) else "0";
    icmp_ln887_fu_385_p2 <= "1" when (t_V_fu_378_p3 = ap_const_lv16_FFFF) else "0";
    icmp_ln895_fu_349_p2 <= "1" when (unsigned(sext_ln34_fu_321_p1) > unsigned(maxBin_V_load_fu_120)) else "0";

    maxBin_V_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, sext_ln34_reg_506, icmp_ln895_reg_519, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln895_reg_519 = ap_const_lv1_1))) then 
            maxBin_V <= sext_ln34_reg_506;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            maxBin_V <= ap_const_lv32_0;
        else 
            maxBin_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    maxBin_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln895_reg_519)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln895_reg_519 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            maxBin_V_ap_vld <= ap_const_logic_1;
        else 
            maxBin_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    minBin_V_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, sext_ln34_reg_506, icmp_ln887_1_reg_523, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln887_1_reg_523 = ap_const_lv1_1))) then 
            minBin_V <= sext_ln34_reg_506;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            minBin_V <= ap_const_lv32_186A0;
        else 
            minBin_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    minBin_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln887_1_reg_523)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln887_1_reg_523 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            minBin_V_ap_vld <= ap_const_logic_1;
        else 
            minBin_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    newBinValue_V_1_fu_413_p3 <= (select_ln46_fu_397_p3 & trunc_ln38_fu_364_p1);
    newBinValue_V_fu_405_p3 <= (tmp_2_fu_368_p4 & select_ln46_fu_397_p3);
    newPixValue_V_1_fu_391_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(t_V_fu_378_p3));
    select_ln46_fu_397_p3 <= 
        ap_const_lv16_FFFF when (icmp_ln887_fu_385_p2(0) = '1') else 
        newPixValue_V_1_fu_391_p2;
        sext_ln34_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_V_1_fu_308_p3),32));

        sext_ln35_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_325_p4),16));

        sext_ln38_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(RamLocation_fu_339_p2),64));

    shift_fu_317_p1 <= tmp_data_V_1_fu_308_p3(1 - 1 downto 0);
    t_V_fu_378_p3 <= 
        tmp_2_fu_368_p4 when (shift_reg_500(0) = '1') else 
        trunc_ln38_fu_364_p1;
    tmp_1_fu_292_p4 <= CorrectedFrameDataIn_TDATA_int(15 downto 11);
    tmp_2_fu_368_p4 <= Bin_V_Dout_A(31 downto 16);
    tmp_3_fu_325_p4 <= tmp_data_V_1_fu_308_p3(15 downto 1);
    tmp_data_V_1_fu_308_p3 <= 
        ap_const_lv16_7FF when (icmp_ln34_fu_302_p2(0) = '1') else 
        CorrectedFrameDataIn_TDATA_int;
    trunc_ln1503_fu_217_p1 <= location_V(1 - 1 downto 0);
    trunc_ln38_fu_364_p1 <= Bin_V_Dout_A(16 - 1 downto 0);
    zext_ln27_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addRam_fu_221_p3),16));
end behav;
