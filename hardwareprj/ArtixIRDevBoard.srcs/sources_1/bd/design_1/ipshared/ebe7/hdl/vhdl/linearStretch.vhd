-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity linearStretch is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    Frame_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    Frame_TVALID : IN STD_LOGIC;
    Frame_TREADY : OUT STD_LOGIC;
    Frame_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    Frame_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    Frame_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    Frame_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    Frame_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    Frame_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    Output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    Output_r_TVALID : OUT STD_LOGIC;
    Output_r_TREADY : IN STD_LOGIC;
    Output_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    Output_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    Output_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    Output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    Output_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    Output_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of linearStretch is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "linearStretch,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a50t-csg325-2,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.190000,HLS_SYN_LAT=38414,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=411,HLS_SYN_LUT=561,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv17_FFFF : STD_LOGIC_VECTOR (16 downto 0) := "01111111111111111";
    constant ap_const_lv16_9600 : STD_LOGIC_VECTOR (15 downto 0) := "1001011000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_95FF : STD_LOGIC_VECTOR (15 downto 0) := "1001010111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal MaxMin_V : STD_LOGIC_VECTOR (31 downto 0);
    signal Frame_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln27_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln27_reg_374 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln27_reg_374_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_162 : STD_LOGIC_VECTOR (15 downto 0);
    signal Min_V_fu_183_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Min_V_reg_353 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_195_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln895_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln895_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln27_fu_228_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln27_reg_368 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_block_state22_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_238_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_keep_V_reg_383 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_388 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_393 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_reg_398 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_403 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_reg_408 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_415 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_last_V_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state22 : STD_LOGIC;
    signal trunc_ln321_fu_223_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_p_088_0_phi_fu_155_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_088_0_reg_151 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal Max_V_fu_173_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_187_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_191_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_201_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal Pixel1_V_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Pixel2_V_fu_276_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal PixelCorrected1_V_fu_341_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal PixelCorrected2_V_fu_347_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln53_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelCorrected1_V_fu_341_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal PixelCorrected1_V_fu_341_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal PixelCorrected2_V_fu_347_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal PixelCorrected2_V_fu_347_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_217_ap_start : STD_LOGIC;
    signal grp_fu_217_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal regslice_both_Output_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_Frame_V_data_V_U_apdone_blk : STD_LOGIC;
    signal Frame_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal Frame_TVALID_int : STD_LOGIC;
    signal Frame_TREADY_int : STD_LOGIC;
    signal regslice_both_Frame_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Frame_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal Frame_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_Frame_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Frame_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Frame_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal Frame_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_Frame_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Frame_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Frame_V_user_V_U_apdone_blk : STD_LOGIC;
    signal Frame_TUSER_int : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_Frame_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Frame_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Frame_V_last_V_U_apdone_blk : STD_LOGIC;
    signal Frame_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_Frame_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Frame_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Frame_V_id_V_U_apdone_blk : STD_LOGIC;
    signal Frame_TID_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_Frame_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Frame_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Frame_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal Frame_TDEST_int : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_Frame_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Frame_V_dest_V_U_ack_in : STD_LOGIC;
    signal Output_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal Output_r_TVALID_int : STD_LOGIC;
    signal Output_r_TREADY_int : STD_LOGIC;
    signal regslice_both_Output_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Output_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Output_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Output_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Output_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Output_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Output_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Output_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Output_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Output_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Output_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Output_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Output_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Output_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Output_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Output_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Output_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Output_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Output_V_dest_V_U_vld_out : STD_LOGIC;

    component linearStretch_udibkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component linearStretch_mulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component linearStretch_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        MaxMin_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    linearStretch_CRTL_BUS_s_axi_U : component linearStretch_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        MaxMin_V => MaxMin_V);

    linearStretch_udibkb_U1 : component linearStretch_udibkb
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_217_ap_start,
        done => grp_fu_217_ap_done,
        din0 => ap_const_lv17_FFFF,
        din1 => ret_V_fu_195_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    linearStretch_mulcud_U2 : component linearStretch_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => PixelCorrected1_V_fu_341_p0,
        din1 => PixelCorrected1_V_fu_341_p1,
        dout => PixelCorrected1_V_fu_341_p2);

    linearStretch_mulcud_U3 : component linearStretch_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 16)
    port map (
        din0 => PixelCorrected2_V_fu_347_p0,
        din1 => PixelCorrected2_V_fu_347_p1,
        dout => PixelCorrected2_V_fu_347_p2);

    regslice_both_Frame_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Frame_TDATA,
        vld_in => Frame_TVALID,
        ack_in => regslice_both_Frame_V_data_V_U_ack_in,
        data_out => Frame_TDATA_int,
        vld_out => Frame_TVALID_int,
        ack_out => Frame_TREADY_int,
        apdone_blk => regslice_both_Frame_V_data_V_U_apdone_blk);

    regslice_both_Frame_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Frame_TKEEP,
        vld_in => Frame_TVALID,
        ack_in => regslice_both_Frame_V_keep_V_U_ack_in,
        data_out => Frame_TKEEP_int,
        vld_out => regslice_both_Frame_V_keep_V_U_vld_out,
        ack_out => Frame_TREADY_int,
        apdone_blk => regslice_both_Frame_V_keep_V_U_apdone_blk);

    regslice_both_Frame_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Frame_TSTRB,
        vld_in => Frame_TVALID,
        ack_in => regslice_both_Frame_V_strb_V_U_ack_in,
        data_out => Frame_TSTRB_int,
        vld_out => regslice_both_Frame_V_strb_V_U_vld_out,
        ack_out => Frame_TREADY_int,
        apdone_blk => regslice_both_Frame_V_strb_V_U_apdone_blk);

    regslice_both_Frame_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Frame_TUSER,
        vld_in => Frame_TVALID,
        ack_in => regslice_both_Frame_V_user_V_U_ack_in,
        data_out => Frame_TUSER_int,
        vld_out => regslice_both_Frame_V_user_V_U_vld_out,
        ack_out => Frame_TREADY_int,
        apdone_blk => regslice_both_Frame_V_user_V_U_apdone_blk);

    regslice_both_Frame_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Frame_TLAST,
        vld_in => Frame_TVALID,
        ack_in => regslice_both_Frame_V_last_V_U_ack_in,
        data_out => Frame_TLAST_int,
        vld_out => regslice_both_Frame_V_last_V_U_vld_out,
        ack_out => Frame_TREADY_int,
        apdone_blk => regslice_both_Frame_V_last_V_U_apdone_blk);

    regslice_both_Frame_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Frame_TID,
        vld_in => Frame_TVALID,
        ack_in => regslice_both_Frame_V_id_V_U_ack_in,
        data_out => Frame_TID_int,
        vld_out => regslice_both_Frame_V_id_V_U_vld_out,
        ack_out => Frame_TREADY_int,
        apdone_blk => regslice_both_Frame_V_id_V_U_apdone_blk);

    regslice_both_Frame_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Frame_TDEST,
        vld_in => Frame_TVALID,
        ack_in => regslice_both_Frame_V_dest_V_U_ack_in,
        data_out => Frame_TDEST_int,
        vld_out => regslice_both_Frame_V_dest_V_U_vld_out,
        ack_out => Frame_TREADY_int,
        apdone_blk => regslice_both_Frame_V_dest_V_U_apdone_blk);

    regslice_both_Output_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Output_r_TDATA_int,
        vld_in => Output_r_TVALID_int,
        ack_in => Output_r_TREADY_int,
        data_out => Output_r_TDATA,
        vld_out => regslice_both_Output_V_data_V_U_vld_out,
        ack_out => Output_r_TREADY,
        apdone_blk => regslice_both_Output_V_data_V_U_apdone_blk);

    regslice_both_Output_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_383,
        vld_in => Output_r_TVALID_int,
        ack_in => regslice_both_Output_V_keep_V_U_ack_in_dummy,
        data_out => Output_r_TKEEP,
        vld_out => regslice_both_Output_V_keep_V_U_vld_out,
        ack_out => Output_r_TREADY,
        apdone_blk => regslice_both_Output_V_keep_V_U_apdone_blk);

    regslice_both_Output_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_388,
        vld_in => Output_r_TVALID_int,
        ack_in => regslice_both_Output_V_strb_V_U_ack_in_dummy,
        data_out => Output_r_TSTRB,
        vld_out => regslice_both_Output_V_strb_V_U_vld_out,
        ack_out => Output_r_TREADY,
        apdone_blk => regslice_both_Output_V_strb_V_U_apdone_blk);

    regslice_both_Output_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_user_V_reg_393,
        vld_in => Output_r_TVALID_int,
        ack_in => regslice_both_Output_V_user_V_U_ack_in_dummy,
        data_out => Output_r_TUSER,
        vld_out => regslice_both_Output_V_user_V_U_vld_out,
        ack_out => Output_r_TREADY,
        apdone_blk => regslice_both_Output_V_user_V_U_apdone_blk);

    regslice_both_Output_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_422,
        vld_in => Output_r_TVALID_int,
        ack_in => regslice_both_Output_V_last_V_U_ack_in_dummy,
        data_out => Output_r_TLAST,
        vld_out => regslice_both_Output_V_last_V_U_vld_out,
        ack_out => Output_r_TREADY,
        apdone_blk => regslice_both_Output_V_last_V_U_apdone_blk);

    regslice_both_Output_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_id_V_reg_398,
        vld_in => Output_r_TVALID_int,
        ack_in => regslice_both_Output_V_id_V_U_ack_in_dummy,
        data_out => Output_r_TID,
        vld_out => regslice_both_Output_V_id_V_U_vld_out,
        ack_out => Output_r_TREADY,
        apdone_blk => regslice_both_Output_V_id_V_U_apdone_blk);

    regslice_both_Output_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_dest_V_reg_403,
        vld_in => Output_r_TVALID_int,
        ack_in => regslice_both_Output_V_dest_V_U_ack_in_dummy,
        data_out => Output_r_TDEST,
        vld_out => regslice_both_Output_V_dest_V_U_vld_out,
        ack_out => Output_r_TREADY,
        apdone_blk => regslice_both_Output_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state22))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state22)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state22);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_162 <= i_fu_238_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_0_reg_162 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_088_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln895_fu_211_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_088_0_reg_151 <= ap_const_lv15_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln895_reg_364 = ap_const_lv1_1))) then 
                p_088_0_reg_151 <= trunc_ln321_fu_223_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                Min_V_reg_353 <= Min_V_fu_183_p1;
                icmp_ln895_reg_364 <= icmp_ln895_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln27_reg_374 <= icmp_ln27_fu_232_p2;
                icmp_ln27_reg_374_pp0_iter1_reg <= icmp_ln27_reg_374;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_408 <= PixelCorrected1_V_fu_341_p2(15 downto 11);
                tmp_4_reg_415 <= PixelCorrected2_V_fu_347_p2(15 downto 11);
                tmp_dest_V_reg_403 <= Frame_TDEST_int;
                tmp_id_V_reg_398 <= Frame_TID_int;
                tmp_keep_V_reg_383 <= Frame_TKEEP_int;
                tmp_last_V_reg_422 <= tmp_last_V_fu_320_p2;
                tmp_strb_V_reg_388 <= Frame_TSTRB_int;
                tmp_user_V_reg_393 <= Frame_TUSER_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    zext_ln27_reg_368(14 downto 0) <= zext_ln27_fu_228_p1(14 downto 0);
            end if;
        end if;
    end process;
    zext_ln27_reg_368(15) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln27_fu_232_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln895_fu_211_p2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state25, regslice_both_Output_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln895_fu_211_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln895_fu_211_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln27_fu_232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln27_fu_232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                if (((regslice_both_Output_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Frame_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln27_fu_232_p2, Frame_TVALID_int)
    begin
        if (((icmp_ln27_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Frame_TDATA_blk_n <= Frame_TVALID_int;
        else 
            Frame_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Frame_TREADY_assign_proc : process(Frame_TVALID, regslice_both_Frame_V_data_V_U_ack_in)
    begin
        if (((regslice_both_Frame_V_data_V_U_ack_in = ap_const_logic_1) and (ap_const_logic_1 = Frame_TVALID))) then 
            Frame_TREADY <= ap_const_logic_1;
        else 
            Frame_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    Frame_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln27_fu_232_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln27_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Frame_TREADY_int <= ap_const_logic_1;
        else 
            Frame_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    Max_V_fu_173_p4 <= MaxMin_V(31 downto 16);
    Min_V_fu_183_p1 <= MaxMin_V(16 - 1 downto 0);

    Output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln27_reg_374, ap_enable_reg_pp0_iter2, icmp_ln27_reg_374_pp0_iter1_reg, Output_r_TREADY_int)
    begin
        if ((((icmp_ln27_reg_374_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln27_reg_374 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            Output_r_TDATA_blk_n <= Output_r_TREADY_int;
        else 
            Output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Output_r_TDATA_int <= (((((((tmp_4_reg_415 & tmp_4_reg_415) & ap_const_lv1_0) & tmp_4_reg_415) & tmp_1_reg_408) & tmp_1_reg_408) & ap_const_lv1_0) & tmp_1_reg_408);
    Output_r_TVALID <= regslice_both_Output_V_data_V_U_vld_out;

    Output_r_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln27_reg_374, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln27_reg_374 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Output_r_TVALID_int <= ap_const_logic_1;
        else 
            Output_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    Pixel1_V_fu_272_p1 <= Frame_TDATA_int(16 - 1 downto 0);
    Pixel2_V_fu_276_p4 <= Frame_TDATA_int(31 downto 16);
    PixelCorrected1_V_fu_341_p0 <= std_logic_vector(unsigned(Pixel1_V_fu_272_p1) - unsigned(Min_V_reg_353));
    PixelCorrected1_V_fu_341_p1 <= zext_ln27_reg_368(15 - 1 downto 0);
    PixelCorrected2_V_fu_347_p0 <= std_logic_vector(unsigned(Pixel2_V_fu_276_p4) - unsigned(Min_V_reg_353));
    PixelCorrected2_V_fu_347_p1 <= zext_ln27_reg_368(15 - 1 downto 0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln27_fu_232_p2, Frame_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln27_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_0 = Frame_TVALID_int) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln27_fu_232_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state23_io, ap_block_state24_io, Frame_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln27_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_0 = Frame_TVALID_int) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln27_fu_232_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state23_io, ap_block_state24_io, Frame_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln27_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_0 = Frame_TVALID_int) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state22_pp0_stage0_iter0_assign_proc : process(icmp_ln27_fu_232_p2, Frame_TVALID_int)
    begin
                ap_block_state22_pp0_stage0_iter0 <= ((icmp_ln27_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_0 = Frame_TVALID_int));
    end process;


    ap_block_state23_io_assign_proc : process(icmp_ln27_reg_374, Output_r_TREADY_int)
    begin
                ap_block_state23_io <= ((icmp_ln27_reg_374 = ap_const_lv1_0) and (ap_const_logic_0 = Output_r_TREADY_int));
    end process;

        ap_block_state23_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(icmp_ln27_reg_374_pp0_iter1_reg, Output_r_TREADY_int)
    begin
                ap_block_state24_io <= ((icmp_ln27_reg_374_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = Output_r_TREADY_int));
    end process;

        ap_block_state24_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state22_assign_proc : process(icmp_ln27_fu_232_p2)
    begin
        if ((icmp_ln27_fu_232_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state25, regslice_both_Output_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_Output_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_088_0_phi_fu_155_p4_assign_proc : process(icmp_ln895_reg_364, ap_CS_fsm_state21, trunc_ln321_fu_223_p1, p_088_0_reg_151)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln895_reg_364 = ap_const_lv1_1))) then 
            ap_phi_mux_p_088_0_phi_fu_155_p4 <= trunc_ln321_fu_223_p1;
        else 
            ap_phi_mux_p_088_0_phi_fu_155_p4 <= p_088_0_reg_151;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25, regslice_both_Output_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_Output_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_217_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln895_fu_211_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln895_fu_211_p2 = ap_const_lv1_1))) then 
            grp_fu_217_ap_start <= ap_const_logic_1;
        else 
            grp_fu_217_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_238_p2 <= std_logic_vector(unsigned(i_0_reg_162) + unsigned(ap_const_lv16_1));
    icmp_ln27_fu_232_p2 <= "1" when (i_0_reg_162 = ap_const_lv16_9600) else "0";
    icmp_ln53_fu_314_p2 <= "1" when (i_0_reg_162 = ap_const_lv16_95FF) else "0";
    icmp_ln895_fu_211_p2 <= "1" when (signed(tmp_2_fu_201_p4) > signed(ap_const_lv16_0)) else "0";
    lhs_V_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Max_V_fu_173_p4),17));
    ret_V_fu_195_p2 <= std_logic_vector(unsigned(lhs_V_fu_187_p1) - unsigned(rhs_V_fu_191_p1));
    rhs_V_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Min_V_fu_183_p1),17));
    tmp_2_fu_201_p4 <= ret_V_fu_195_p2(16 downto 1);
    tmp_last_V_fu_320_p2 <= (icmp_ln53_fu_314_p2 or Frame_TLAST_int);
    trunc_ln321_fu_223_p1 <= grp_fu_217_p2(15 - 1 downto 0);
    zext_ln27_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_088_0_phi_fu_155_p4),16));
end behav;
